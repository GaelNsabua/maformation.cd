document.addEventListener('DOMContentLoaded', () => {
    // Ouvrir et fermer le chatbot
    document.getElementById('start-chat').addEventListener('click', () => {
        document.getElementById('chat-bot').classList.remove('hidden');
        document.getElementById('chat-bot').classList.add('flex');
        addMessageToChat('bot', "Bonjour ! Je suis votre assistant virtuel. Je suis l√† pour vous aider √† trouver la facult√© qui correspond le mieux √† vos int√©r√™ts, comp√©tences et objectifs de carri√®re. R√©pondez simplement √† quelques questions et je vous fournirai des recommandations personnalis√©es.");
        setTimeout(askNextQuestion, 8000); // Attend 8 secondes avant de poser la premi√®re question
    });

    document.getElementById('close-chat').addEventListener('click', () => {
        document.getElementById('chat-bot').classList.remove('flex');
        document.getElementById('chat-bot').classList.add('hidden');
    });

    // Envoyer le message de l'utilisateur
    document.getElementById('send-btn').addEventListener('click', sendMessage);
    document.getElementById('user-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });

    // Questions et r√©ponses vari√©es
    const responses = {
        greeting: [
            "Bonjour! Comment puis-je vous aider aujourd'hui?",
            "Salut! Quels sont vos centres d'int√©r√™t?",
            "Bonjour! Parlez-moi de vos comp√©tences principales."
        ],
        interestsQuestion: [
            "Quels sont vos centres d'int√©r√™t? (par exemple : sciences, arts, commerce)",
            "Quels sujets vous passionnent le plus?",
            "De quoi aimez-vous parler ou lire dans votre temps libre?"
        ],
        skillsQuestion: [
            "Quelles sont vos comp√©tences principales? (par exemple : math√©matiques, dessin, gestion)",
            "Dans quels domaines excellez-vous?",
            "Quelles comp√©tences trouvez-vous faciles √† apprendre ou √† pratiquer?"
        ],
        goalsQuestion: [
            "Quels sont vos objectifs de carri√®re? (par exemple : ing√©nieur, artiste, gestionnaire)",
            "O√π vous voyez-vous dans 5 √† 10 ans?",
            "Quels sont vos r√™ves ou aspirations professionnelles?"
        ],
        previousOptionQuestion: [
            "Quelle option avez-vous suivie √† l'√©cole secondaire? (par exemple : sciences, lettres, √©conomie)",
            "Quel √©tait votre principal domaine d'√©tudes au lyc√©e?",
            "Quel programme avez-vous choisi pendant vos ann√©es scolaires?"
        ]
    };

    let currentQuestionIndex = 0;
    const answers = {
        interests: [],
        skills: [],
        goals: [],
        previousOption: []
    };

    // Fonction pour ajouter des messages √† la conversation
    function addMessageToChat(sender, message) {
        const chatBody = document.getElementById('chat-body');
        const messageElem = document.createElement('div');
        messageElem.classList.add(sender === 'user' ? 'text-right' : 'text-left', 'mb-2');
        messageElem.innerHTML = `
        ${sender === 'user' ? ' ' : `
            <div class="w-7 h-7">
            <img src="./image/chatbot.png" alt="student" class="w-full h-auto object-cover">
            </div>`}
            <span class="inline-block bg-${sender === 'user' ? 'blue-500 text-white' : 'gray-200'} rounded p-2" id="mes"></span>`;
        chatBody.appendChild(messageElem);
        typing(message)
        chatBody.scrollTop = chatBody.scrollHeight;
    }

    // Fonction pour cr√©er l'animation de saisie
    function typing(message){
        let typed = new Typed('#mes',{
            strings: [message],
            typeSpeed: 15,
          })

        const element = document.getElementById('mes')
        element.innerHTML = message
        element.removeAttribute('id')
    }

    // Fonction pour obtenir une r√©ponse al√©atoire
    function getRandomResponse(responseArray) {
        return responseArray[Math.floor(Math.random() * responseArray.length)];
    }

    // Fonction pour poser la prochaine question
    function askNextQuestion() {
        let question;
        switch (currentQuestionIndex) {
            case 0:
                question = getRandomResponse(responses.interestsQuestion);
                break;
            case 1:
                question = getRandomResponse(responses.skillsQuestion);
                break;
            case 2:
                question = getRandomResponse(responses.goalsQuestion);
                break;
            case 3:
                question = getRandomResponse(responses.previousOptionQuestion);
                break;
            default:
                getRecommendations();
                return;
        }

        setTimeout(() => {
            addMessageToChat('bot', question);
        }, 1000);
        
        currentQuestionIndex++;
    }

    // Fonction pour envoyer le message de l'utilisateur
    async function sendMessage() {
        const userInput = document.getElementById('user-input').value;
        if (!userInput.trim()) return;

        addMessageToChat('user', userInput);
        document.getElementById('user-input').value = '';
        handleUserResponse(userInput);
    }

    // Fonction pour traiter la r√©ponse de l'utilisateur
    function handleUserResponse(message) {
        const doc = nlp(message);
        switch (currentQuestionIndex) {
            case 1:
                answers.interests = doc.nouns().out('array');
                break;
            case 2:
                answers.skills = doc.nouns().out('array');
                break;
            case 3:
                answers.goals = doc.nouns().out('array');
                break;
            case 4:
                answers.previousOption = doc.nouns().out('array');
                break;
        }
        askNextQuestion();
    }

    // Fonction pour obtenir des recommandations
    async function getRecommendations() {
        console.log(answers)
        try {
            const response = await fetch('http://localhost:5000/recommendation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(answers)
            });

            if (response.ok) {
                const data = await response.json();
                if (data.length > 0) {
                    addMessageToChat('bot', 'Voici les facult√©s recommand√©es pour vous :');
                    data.forEach(faculty => {
                        addMessageToChat('bot', `${faculty.name} : ${faculty.description}`);
                    });
                    displayRecommendations(data);
                } else {
                    addMessageToChat('bot', 'D√©sol√©, je n\'ai aucune facult√© ou fili√®re √† vous proposer pour le moment üò•');
                    addMessageToChat('bot', 'Veuillez r√©essayer en r√©pondant de mani√®re plus pr√©cise afin de me permettre de vous recommander des options adapt√©es √† vos pr√©f√©rences.');
                }
            } else {
                addMessageToChat('bot', 'Erreur : Impossible de r√©cup√©rer les recommandations.');
            }
        } catch (error) {
            addMessageToChat('bot', 'Erreur de connexion. Veuillez r√©essayer plus tard.');
        }
    }

    // Fonction pour afficher les recommandations
    function displayRecommendations(recommendations) {
        const resultsSection = document.getElementById('results-section');
        const results = document.getElementById('results');
        results.innerHTML = '';

        recommendations.forEach(faculty => {
            const facultyElem = document.createElement('div');
            facultyElem.classList.add('bg-white', 'rounded-lg', 'shadow', 'p-6');
            facultyElem.innerHTML = `
                <h3 class="text-xl font-bold mb-2">${faculty.name}</h3>
                <p class="mb-4">${faculty.description}</p>
                <button class="bg-blue-600 text-white py-2 px-4 rounded mt-2" onclick="showFeedbackForm('${faculty._id}')">En savoir plus</button>
            `;
            results.appendChild(facultyElem);
        });

        resultsSection.style.display = 'block';
    }

    // // Poser la premi√®re question (l'introduction est g√©r√©e au d√©but)
    // askNextQuestion();
});
